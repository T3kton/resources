sflinks = [
            [ 'vmware-esx-base', 'vcenter-vm-base' ],
            [ 'vcenter-esx-base', 'manual-foundation-base' ],
            [ 'vmware-esx-base', 'amt-base' ],
            [ 'vmware-esx-base', 'ipmi-base' ],
            [ 'vmware-esx-base', 'virtualbox-vm-base' ]
          ]

[ structure.vmware-esx-base ]
  description = 'Base ESXi'
  scripts = { 'create' = 'create-esx', 'destroy' = 'destroy-esx' }
[ structure.vmware-esx-base.config_values ]
    root_pass = '$6$rootroot$oLo.loyMV45VA7/0sKV5JH/xBAXiq/igL4hQrGz3yd9XUavmC82tZm1lxW2N.5eLxQUlqp53wXKRzifZApP0/1'
    memory_size = 4096
    cpu_count = 2
    vcenter_network_interface_class = 'VMXNet3'
    vcenter_guest_id = 'vmkernel6Guest'
    vcenter_virtual_exec_usage = 'on'

[ script.create-esx ]
  description = 'Install ESXi'
  script = """# pxe boot and install
dhcp.set_pxe( interface=structure.provisioning_interface, pxe='esx' )
foundation.power_on()
delay( seconds=120 )
foundation.wait_for_poweroff()

dhcp.set_pxe( interface=structure.provisioning_interface, pxe='normal-boot' )
foundation.power_on()

iputils.wait_for_port( target=structure.provisioning_ip, port=80 )

datastore_list = config.datastore_list
while len( array=datastore_list ) do
begin()
  datastore = pop( array=datastore_list )
  vcenter.create_datastore( name=datastore[ 'name' ], model=datastore[ 'model' ] )
end
"""

[ script.destroy-esx ]
  description = 'Uninstall ESXi'
  script = """# nothing to do, foundation cleanup should wipe/destroy the disks
foundation.power_off()
#eventually pxe boot to MBR wipper
"""

[ pxe.esx ]
  boot_script = """echo ESX Installer
kernel -n mboot.c32 {{ __pxe_location }}esxi/mboot.c32
imgargs mboot.c32 -c {{ __pxe_location }}esxi/boot.cfg ks={{ __pxe_template_location }}
boot mboot.c32
"""
  template = """accepteula

rootpw --iscrypted {{ root_pass }}

clearpart --alldrives --overwritevmfs

install --firstdisk --overwritevmfs
#install --firstdisk=usb --overwritevmfs

network --bootproto=static --ip={{ network.eth0.ip_address }} --netmask={{ network.eth0.netmask }}{% if network.eth0.gateway %} --gateway={{ network.eth0.gateway }}{% endif %} --nameserver={{ dns_servers.0 }} --hostname={{ hostname }}

%post --interpreter=busybox
/sbin/poweroff
"""
